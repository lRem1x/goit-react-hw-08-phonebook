{"version":3,"file":"static/js/899.fa152dee.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","../node_modules/nanoid/index.browser.js","redux/contacts/operations.js","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","redux/filterSlice.js","components/Filter/Filter.js","components/Section/Section.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n  width: 300px;\n  border: 1px dashed #676767;\n  border-radius: 5px;\n`;\n\nexport const InputLabel = styled.label`\n  font-size: 20px;\n  &:not(:first-child) {\n    margin-top: 10px;\n  }\n`;\n\nexport const InputField = styled.input`\n  margin-top: 8px;\n  /* margin-left: 8px; */\n  border: 1px dashed #676767;\n  border-radius: 5px;\n  padding: 5px;\n  transition: 300ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:focus {\n    border: 1px solid #4fe7f5;\n    outline: none;\n  }\n`;\n\nexport const AddButton = styled.button`\n  margin-top: 20px;\n  padding: 5px;\n  width: 150px;\n  align-self: center;\n  background-color: #a5f7ff;\n  border: 1px solid #62c0c9;\n  border-radius: 5px;\n  transition: 300ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    cursor: pointer;\n    background: #4fe7f5;\n  }\n`;","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import axios from 'axios';\n\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const fetchContacts = createAsyncThunk(\n  'contacts/fetchAll',\n  async (_, { rejectWithValue }) => {\n    try {\n      const res = await axios.get('/contacts');\n\n      return res.data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const addContact = createAsyncThunk(\n  'contacts/addContact',\n  async (userCredentials, { rejectWithValue }) => {\n    try {\n      const res = await axios.post('/contacts', userCredentials);\n\n      return res.data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const deleteContact = createAsyncThunk(\n  'contacts/deleteContact',\n  async (contactId, { rejectWithValue }) => {\n    try {\n      const res = await axios.delete(`contacts/${contactId}`);\n\n      return res.data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterValue = state => state.filter.value;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filterValue) =>\n    contacts.filter(contact => contact.name.toLowerCase().includes(filterValue))\n);","import { useMemo, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\nimport { addContact } from 'redux/contacts/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectIsLoading } from 'redux/contacts/selectors';\nimport { Form, InputLabel, InputField, AddButton } from './ContactForm.styled';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = useMemo(() => nanoid(4), []);\n  const numberInputId = useMemo(() => nanoid(4), []);\n\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const doesContactExist = nameQuery => {\n    return contacts.some(\n      contact => contact.name.toLowerCase() === nameQuery.toLowerCase()\n    );\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (doesContactExist(name)) {\n      toast.warning(`'${name}' is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n\n    resetForm();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <InputLabel htmlFor={nameInputId}>Name</InputLabel>\n      <InputField\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        id={nameInputId}\n        placeholder=\"Contact name\"\n        required\n        autoComplete=\"off\"\n        onChange={handleChange}\n        value={name}\n      />\n\n      <InputLabel htmlFor={numberInputId}>Number</InputLabel>\n      <InputField\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        id={numberInputId}\n        placeholder=\"Phone number\"\n        required\n        autoComplete=\"off\"\n        onChange={handleChange}\n        value={number}\n      />\n      <AddButton type=\"submit\" disabled={isLoading}>\n        {isLoading ? 'Adding contact...' : 'Add contact'}\n      </AddButton>\n    </Form>\n  );\n};\n\nexport default ContactForm;","import { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  selectError,\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport { ContactItem, DeleteButton } from './ContactList.styled';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const showLoading = isLoading && !error;\n  const showError = error && !isLoading;\n\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <>\n      {showLoading && <p>Loading...</p>}\n      {showError && <p>{error.message}</p>}\n\n      {visibleContacts.map(({ id, name, number }) => (\n        <ContactItem key={id}>\n          {name}: {number}\n          <DeleteButton\n            id={id}\n            type=\"button\"\n            onClick={() => {\n              dispatch(deleteContact(id));\n            }}\n            disabled={isLoading}\n          >\n            Delete\n          </DeleteButton>\n        </ContactItem>\n      ))}\n    </>\n  );\n};\n\nexport default ContactList;","import styled from 'styled-components';\n\nexport const FilterWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  padding: 20px;\n  border: 1px dashed #676767;\n  border-radius: 5px;\n`;","import { createSlice } from '@reduxjs/toolkit';\n\nexport const filterInitialState = { value: '' };\n\nexport const filterSlice = createSlice({\n  name: 'filter',\n  initialState: filterInitialState,\n  reducers: {\n    setContactFilter: (state, action) => {\n      state.value = action.payload;\n    },\n  },\n});\nexport const { setContactFilter } = filterSlice.actions;","import { useDispatch } from 'react-redux';\nimport { FilterWrap } from './Filter.styled';\nimport {\n  InputLabel,\n  InputField,\n} from 'components/ContactForm/ContactForm.styled';\nimport { setContactFilter } from 'redux/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { value } = e.target;\n\n    value\n      ? dispatch(setContactFilter(value.trim().toLowerCase()))\n      : dispatch(setContactFilter(''));\n  };\n\n  return (\n    <FilterWrap>\n      <InputLabel htmlFor=\"filter\">Find your contacts by name</InputLabel>\n      <InputField\n        type=\"text\"\n        name=\"filter\"\n        id=\"filter\"\n        autoComplete=\"off\"\n        title=\"Find your contacts by name\"\n        onChange={handleChange}\n      />\n    </FilterWrap>\n  );\n};\n\nexport default Filter;","import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <div>\n      <h2>{title}</h2>\n      {children}\n    </div>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.any,\n};\n\nexport default Section;","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport Section from 'components/Section';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { List } from 'components/ContactList/ContactList.styled';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n\n        <List>\n          <ContactList />\n        </List>\n      </Section>\n    </>\n  );\n};\n\nexport default Contacts;"],"names":["Form","styled","InputLabel","InputField","AddButton","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","fetchContacts","createAsyncThunk","_","rejectWithValue","axios","res","data","message","addContact","userCredentials","deleteContact","contactId","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","filter","filterValue","contact","toLowerCase","includes","useState","setName","number","setNumber","nameInputId","useMemo","numberInputId","dispatch","useDispatch","useSelector","handleChange","e","currentTarget","onSubmit","nameQuery","preventDefault","some","toast","htmlFor","type","pattern","title","placeholder","required","autoComplete","onChange","disabled","showLoading","showError","visibleContacts","onClick","FilterWrap","setContactFilter","createSlice","initialState","reducers","action","payload","actions","target","trim","children","useEffect"],"sourceRoot":""}